/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micropos.api;

import com.micropos.dto.CartDto;
import com.micropos.dto.ErrorDto;
import com.micropos.dto.ItemDto;
import com.micropos.dto.ItemFieldsDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-19T20:34:28.679042203+08:00[Asia/Shanghai]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "item", description = "the item API")
public interface CartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /carts/{cartId} : Add item to a cart
     * Adds a product to a cart and returns it.
     *
     * @param cartId The id of the cart to add the product to. (required)
     * @param itemFieldsDto Item to add to the cart (required)
     * @return Cart updated (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addItemToCart",
        summary = "Add item to a cart",
        description = "Adds a product to a cart and returns it.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cart updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts/{cartId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CartDto> addItemToCart(
        @Parameter(name = "cartId", description = "The id of the cart to add the product to.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId,
        @Parameter(name = "ItemFieldsDto", description = "Item to add to the cart", required = true) @Valid @RequestBody ItemFieldsDto itemFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /carts : Create a new cart
     * Creates a new cart and returns it.
     *
     * @return The cart was successfully added. (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createCart",
        summary = "Create a new cart",
        description = "Creates a new cart and returns it.",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The cart was successfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CartDto> createCart(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /carts/{cartId} : Delete a cart
     * Deletes a cart.
     *
     * @param cartId The id of the cart to delete. (required)
     * @return Cart deleted (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteCart",
        summary = "Delete a cart",
        description = "Deletes a cart.",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cart deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/carts/{cartId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CartDto> deleteCart(
        @Parameter(name = "cartId", description = "The id of the cart to delete.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /carts/{cartId}/{itemId} : Delete a item of a cart
     * Delete a item of a cart.
     *
     * @param cartId The id of the cart to delete. (required)
     * @param itemId The id of the item to delete. (required)
     * @return Cart updated (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteItemOfCart",
        summary = "Delete a item of a cart",
        description = "Delete a item of a cart.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cart updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/carts/{cartId}/{itemId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CartDto> deleteItemOfCart(
        @Parameter(name = "cartId", description = "The id of the cart to delete.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId,
        @Parameter(name = "itemId", description = "The id of the item to delete.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Integer itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts : List all carts
     * Returns an array of carts.
     *
     * @return A paged array of carts (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listCarts",
        summary = "List all carts",
        description = "Returns an array of carts.",
        tags = { "carts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of carts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CartDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CartDto>> listCarts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }, { \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId} : Info for a specific cart
     * Returns a single cart.
     *
     * @param cartId The id of the cart to retrieve. (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "showCartById",
        summary = "Info for a specific cart",
        description = "Returns a single cart.",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CartDto> showCartById(
        @Parameter(name = "cartId", description = "The id of the cart to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId}/{itemId} : Info for a specific item of a cart
     * Returns a single item.
     *
     * @param cartId The id of the cart to retrieve. (required)
     * @param itemId The id of the item to retrieve. (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "showItemOfCart",
        summary = "Info for a specific item of a cart",
        description = "Returns a single item.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}/{itemId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ItemDto> showItemOfCart(
        @Parameter(name = "cartId", description = "The id of the cart to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId,
        @Parameter(name = "itemId", description = "The id of the item to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Integer itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId}/total : Total a cart
     * Total a cart and returns the value.
     *
     * @param cartId The id of the cart to total. (required)
     * @return Cart total (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "showTotal",
        summary = "Total a cart",
        description = "Total a cart and returns the value.",
        tags = { "cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cart total", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Double.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}/total",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Double> showTotal(
        @Parameter(name = "cartId", description = "The id of the cart to total.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /carts/{cartId}/{itemId} : Update a item of a cart
     * Update a item of a cart.
     *
     * @param cartId The id of the cart to update. (required)
     * @param itemId The id of the item to update. (required)
     * @param itemFieldsDto Item to update (required)
     * @return Cart updated (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateItemOfCart",
        summary = "Update a item of a cart",
        description = "Update a item of a cart.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cart updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CartDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/carts/{cartId}/{itemId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CartDto> updateItemOfCart(
        @Parameter(name = "cartId", description = "The id of the cart to update.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") Integer cartId,
        @Parameter(name = "itemId", description = "The id of the item to update.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Integer itemId,
        @Parameter(name = "ItemFieldsDto", description = "Item to update", required = true) @Valid @RequestBody ItemFieldsDto itemFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 }, { \"product\" : { \"image\" : \"image\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"amount\" : 6, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
